.\"
.\" Copyright (C) 2016-2022  Davidson Francis <davidsondfgl@gmail.com>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>
.\"
.TH man 3 "28 Nov 2023" "1.0" "wsServer man page"
.SH NAME
ws_socket \- Start the WebSocket server
.SH SYNOPSIS
.nf
.B #include <ws.h>
.sp
.BI "int ws_socket(struct ws_server " *ws_srv ");
.fi
.SH DESCRIPTION
.BR ws_socket ()
starts the websocket server for the configured parameters
.IR ws_srv ,
and events, defined as follows:

.nf
	struct ws_server
	{
		const char *host;
		uint16_t port;
		int thread_loop;
		uint32_t timeout_ms;
		struct ws_events evs;
	};
.fi

Where:
.RS 2
.IP \(em 2
host - defines the host to be binded, such as "localhost", "0.0.0.0" (for IPv4)
and "::" (for IPv4 and v6)
.PP
.IP \(em 2
port - listening port
.IP \(em 2
thread_loop - specifies if the accept loop should run on the same thread (if
equals 0) or on a different thread (if != 0). In other words, if
.I ws_socket()
should be blocking (value of 0) or non-blocking (value != 0).
.IP \(em 2
evs - event structure (see NOTES)
.PP

Optionally, a user can set a pre-defined
.I timeout_ms
time (in milliseconds) that each message should have. Think of it like a 'ping':
if the client doesn't respond in x amount of time, the client is unresponsive
and the server shouldn't bother sending message to it.

In case of doubt, leave as 0.

.SH RETURN VALUE
Returns 0 if in non-blocking mode.
.SH NOTES
.PP
The structure
.I evs
is defined as follows:
.nf
	struct ws_events
	{
		void (*onopen)(ws_cli_conn_t *client);
		void (*onclose)(ws_cli_conn_t *client);
		void (*onmessage)(ws_cli_conn_t *client,
			const unsigned char * msg,
			uint64_t size, int type);
	};
.fi

Each element corresponds to function pointers that are triggered when the
events occur.

The events:
.RS 2
.IP \(em 2
onopen: occurs when a client successfully connects and handshakes with the
server.
.IP \(em 2
onclose: occurs when a valid client (that handshaked with the server)
disconnects with the server. The reason is not informed.
.IP \(em 2
onmessage: occurs when a client sends a message (whether txt or bin) to the
server.
.PP
Also note that the thread that sends the events is the same as that deals
with the client connection, so keep in mind that you need to let the
function return. If you want to perform further processing, consider
creating a new thread.

.SH EXAMPLE
.nf
#include <ws.h>

void onopen(ws_cli_conn_t *client) {}
void onclose(ws_cli_conn_t *client) {}
void onmessage(ws_cli_conn_t *client) {}

int main(void) {
	ws_socket(&(struct ws_server){
		/*
		 * Bind host:
		 * localhost -> localhost/127.0.0.1
		 * 0.0.0.0   -> global IPv4
		 * ::        -> global IPv4+IPv6 (DualStack)
		 */
		.host = "localhost",
		.port = 8080,
		.thread_loop   = 0,
		.timeout_ms    = 1000,
		.evs.onopen    = &onopen,
		.evs.onclose   = &onclose,
		.evs.onmessage = &onmessage
	});

	/*
	 * If you want to execute code past ws_socket(), set
	 * .thread_loop to '1'.
	 */

	return (0);
}

.SH SEE ALSO
.BR ws_sendframe_txt (3),
.BR ws_sendframe_bin (3)
.SH AUTHOR
Davidson Francis (davidsondfgl@gmail.com)
